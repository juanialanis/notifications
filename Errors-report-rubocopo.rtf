diff --git a/Gemfile b/Gemfile
index 5805758..3552c1b 100644
--- a/Gemfile
+++ b/Gemfile
@@ -1,13 +1,16 @@
+# frozen_string_literal: true
+
 ruby '2.6.4'
 source 'https://rubygems.org'
 
-gem 'thin'
-gem 'sinatra', '2.0.7'
-gem 'sequel'
-gem 'pg'
 gem 'actionview', '~> 4.2', '>= 4.2.5.1'
-gem 'sinatra-websocket', '~> 0.3.1'
+gem 'pg'
 gem 'pony', '~> 1.11'
+gem 'rubocop', '~> 0.89.1', require: false
+gem 'sequel'
+gem 'sinatra', '2.0.7'
+gem 'sinatra-websocket', '~> 0.3.1'
+gem 'thin'
 
 group :development do
   gem 'dotenv', '2.7.5'
diff --git a/Gemfile.lock b/Gemfile.lock
index 6b84a42..0b1522a 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -1,25 +1,88 @@
 GEM
   remote: https://rubygems.org/
   specs:
+    actionview (4.2.11.3)
+      activesupport (= 4.2.11.3)
+      builder (~> 3.1)
+      erubis (~> 2.7.0)
+      rails-dom-testing (~> 1.0, >= 1.0.5)
+      rails-html-sanitizer (~> 1.0, >= 1.0.3)
+    activesupport (4.2.11.3)
+      i18n (~> 0.7)
+      minitest (~> 5.1)
+      thread_safe (~> 0.3, >= 0.3.4)
+      tzinfo (~> 1.1)
+    addressable (2.7.0)
+      public_suffix (>= 2.0.2, < 5.0)
+    ast (2.4.1)
+    builder (3.2.4)
+    concurrent-ruby (1.1.6)
+    crass (1.0.6)
+    daemons (1.3.1)
     dotenv (2.7.5)
+    em-websocket (0.3.8)
+      addressable (>= 2.1.1)
+      eventmachine (>= 0.12.9)
+    erubis (2.7.0)
+    eventmachine (1.2.7)
     ffi (1.12.2)
+    i18n (0.9.5)
+      concurrent-ruby (~> 1.0)
     listen (3.2.1)
       rb-fsevent (~> 0.10, >= 0.10.3)
       rb-inotify (~> 0.9, >= 0.9.10)
+    loofah (2.6.0)
+      crass (~> 1.0.2)
+      nokogiri (>= 1.5.9)
+    mail (2.7.1)
+      mini_mime (>= 0.1.1)
+    mini_mime (1.0.2)
+    mini_portile2 (2.4.0)
+    minitest (5.14.1)
     mustermann (1.1.1)
       ruby2_keywords (~> 0.0.1)
-    nio4r (2.5.2)
+    nokogiri (1.10.9)
+      mini_portile2 (~> 2.4.0)
+    parallel (1.19.2)
+    parser (2.7.1.4)
+      ast (~> 2.4.1)
     pg (1.2.3)
-    puma (4.3.3)
-      nio4r (~> 2.0)
+    pony (1.13.1)
+      mail (>= 2.0)
+    public_suffix (4.0.5)
     rack (2.2.2)
     rack-protection (2.0.7)
       rack
+    rack-test (1.1.0)
+      rack (>= 1.0, < 3)
+    rails-deprecated_sanitizer (1.0.3)
+      activesupport (>= 4.2.0.alpha)
+    rails-dom-testing (1.0.9)
+      activesupport (>= 4.2.0, < 5.0)
+      nokogiri (~> 1.6)
+      rails-deprecated_sanitizer (>= 1.0.1)
+    rails-html-sanitizer (1.3.0)
+      loofah (~> 2.3)
+    rainbow (3.0.0)
     rb-fsevent (0.10.3)
     rb-inotify (0.10.1)
       ffi (~> 1.0)
+    regexp_parser (1.7.1)
     rerun (0.13.0)
       listen (~> 3.0)
+    rexml (3.2.4)
+    rubocop (0.89.1)
+      parallel (~> 1.10)
+      parser (>= 2.7.1.1)
+      rainbow (>= 2.2.2, < 4.0)
+      regexp_parser (>= 1.7)
+      rexml
+      rubocop-ast (>= 0.3.0, < 1.0)
+      ruby-progressbar (~> 1.7)
+      unicode-display_width (>= 1.4.0, < 2.0)
+    rubocop-ast (0.4.0)
+      parser (>= 2.7.1.4)
+    ruby-progressbar (1.10.1)
     ruby2_keywords (0.0.2)
     sequel (5.31.0)
     sinatra (2.0.7)
@@ -27,18 +90,38 @@ GEM
       rack (~> 2.0)
       rack-protection (= 2.0.7)
       tilt (~> 2.0)
+    sinatra-websocket (0.3.1)
+      em-websocket (~> 0.3.6)
+      eventmachine
+      thin (>= 1.3.1, < 2.0.0)
+    sqlite3 (1.4.2)
+    thin (1.7.2)
+      daemons (~> 1.0, >= 1.0.9)
+      eventmachine (~> 1.0, >= 1.0.4)
+      rack (>= 1, < 3)
+    thread_safe (0.3.6)
     tilt (2.0.10)
+    tzinfo (1.2.7)
+      thread_safe (~> 0.1)
+    unicode-display_width (1.7.0)
 
 PLATFORMS
   ruby
 
 DEPENDENCIES
+  actionview (~> 4.2, >= 4.2.5.1)
   dotenv (= 2.7.5)
+  minitest
   pg
-  puma (= 4.3.3)
+  pony (~> 1.11)
+  rack-test
   rerun
+  rubocop (~> 0.89.1)
   sequel
   sinatra (= 2.0.7)
+  sinatra-websocket (~> 0.3.1)
+  sqlite3
+  thin
 
 RUBY VERSION
    ruby 2.6.4p104
diff --git a/app.rb b/app.rb
index e514d70..d1fdaf9 100644
--- a/app.rb
+++ b/app.rb
@@ -1,3 +1,5 @@
+# frozen_string_literal: true
+
 require 'json'
 require './models/init.rb'
 require 'date'
@@ -9,11 +11,10 @@ include ActionView::Helpers::DateHelper
 include FileUtils::Verbose
 
 class App < Sinatra::Base
-  
   configure :development, :production do
     enable :logging
     enable :session
-    set :session_secret, "otro secret pero dificil y abstracto"
+    set :session_secret, 'otro secret pero dificil y abstracto'
     set :sessions, true
     set :server, 'thin'
     set :sockets, []
@@ -21,38 +22,35 @@ class App < Sinatra::Base
 
   before do
     request.path_info
-    @logged2 = session[:user_id] ? "none" : "inline-block"
-    @logged = session[:user_id] ? "inline-block" : "none"
-    if user_not_logger_in? && restricted_path? 
+    @logged2 = session[:user_id] ? 'none' : 'inline-block'
+    @logged = session[:user_id] ? 'inline-block' : 'none'
+    if user_not_logger_in? && restricted_path?
       redirect '/login'
-    elsif session[:user_id] 
+    elsif session[:user_id]
       @current_user = User.find(id: session[:user_id])
       set_unread_number
-      @visibility = @current_user.role == "user" ? "none" : "inline"
+      @visibility = @current_user.role == 'user' ? 'none' : 'inline'
       if session_path?
         redirect '/documents'
       elsif not_authorized_user? && admin_path?
-        redirect '/documents'     
+        redirect '/documents'
       end
     end
-
   end
 
- 
-
   get '/' do
     if !request.websocket?
-      erb :index, :layout => :layoutIndex
+      erb :index, layout: :layoutIndex
     else
       request.websocket do |ws|
         user = session[:user_id]
         logger.info(user)
-        @connection = {user: user, socket: ws}
+        @connection = { user: user, socket: ws }
         ws.onopen do
           settings.sockets << @connection
         end
         ws.onclose do
-          warn("websocket closed")
+          warn('websocket closed')
           settings.sockets.delete(ws)
         end
       end
@@ -60,7 +58,6 @@ class App < Sinatra::Base
   end
 
   def send_email(useremail, doc, user, motive)
-
     @document = doc
 
     @user = User.find(username: user).name
@@ -70,7 +67,7 @@ class App < Sinatra::Base
       @motive = "You have been tagged in a document from the #{doc.categorytaged} category."
 
     elsif motive == 'taged and subscribed'
-        
+
       @motive = "You have been tagged in a document from the #{doc.categorytaged} category to which you are subscribed."
 
     elsif motive == 'subscribed'
@@ -80,97 +77,88 @@ class App < Sinatra::Base
     end
 
     Pony.mail({
-    :to => useremail, 
-    :via => :smtp, 
-    :via_options => {
-      :address => 'smtp.gmail.com',                     
-      :port => '587',
-      :user_name => 'documentuploadsystem@gmail.com',
-      :password => 'rstmezqnvkygptjl',
-      :authentication => :plain,
-      :domain => "gmail.com",
-    },
-      :subject => 'You have a new notification', 
-      :headers => { 'Content-Type' => 'text/html' },
-      :body => erb(:email, layout: false)
-    }
-  )
-
-  end
-
-  
+                to: useremail,
+                via: :smtp,
+                via_options: {
+                  address: 'smtp.gmail.com',
+                  port: '587',
+                  user_name: 'documentuploadsystem@gmail.com',
+                  password: 'rstmezqnvkygptjl',
+                  authentication: :plain,
+                  domain: 'gmail.com'
+                },
+                subject: 'You have a new notification',
+                headers: { 'Content-Type' => 'text/html' },
+                body: erb(:email, layout: false)
+              })
+  end
 
   def cant_pages(cantdocs)
     @docsperpage = 12
-    if cantdocs % @docsperpage == 0
-      @pagelimit =  cantdocs / @docsperpage 
-    else
-      @pagelimit =  cantdocs / @docsperpage + 1
-    end
+    @pagelimit = if (cantdocs % @docsperpage).zero?
+                   cantdocs / @docsperpage
+                 else
+                   cantdocs / @docsperpage + 1
+                 end
   end
 
-  def set_page 
-    if params[:page] 
-      page = params[:page]
-    else
-      page = "1"
-    end
-    return page
+  def set_page
+    page = params[:page] || '1'
+    page
   end
 
-  get "/documents" do 
-    logger.info ""
-    logger.info session["session_id"]
+  get '/documents' do
+    logger.info ''
+    logger.info session['session_id']
     logger.info session.inspect
-    logger.info "-------------"
-    logger.info ""
-    @view = params[:forma]  
+    logger.info '-------------'
+    logger.info ''
+    @view = params[:forma]
     @users = User.all
-   
-    if params[:remove] 
+
+    if params[:remove]
       Document.first(id: params[:remove]).update(delete: true)
       set_notifications_number
     end
 
     @page = set_page
-    
+
     cant_pages(Document.where(delete: false).count)
 
-    if params[:userfilter] || params[:datefilter] || params[:categoryfilter]   
+    if params[:userfilter] || params[:datefilter] || params[:categoryfilter]
       @page = set_page
       @docsperpage = 12
-      cargdocs = filter(params[:userfilter],params[:datefilter],params[:categoryfilter])
-      @documents = cargdocs[((@page.to_i - 1) * @docsperpage) ..  (@page.to_i * @docsperpage)-1]
+      cargdocs = filter(params[:userfilter], params[:datefilter], params[:categoryfilter])
+      @documents = cargdocs[((@page.to_i - 1) * @docsperpage)..(@page.to_i * @docsperpage) - 1]
       cant_pages(cargdocs.length)
     else
-      @documents = Document.where(delete: false).limit(@docsperpage, ((@page.to_i-1) * @docsperpage)).order(:date).reverse
+      @documents = Document.where(delete: false).limit(@docsperpage,
+                                                       ((@page.to_i - 1) * @docsperpage)).order(:date).reverse
     end
     @categories = Category.all
     set_unread_number
     erb :docs
   end
 
-  get "/aboutus" do
-   erb :aboutus, :layout => :layout
+  get '/aboutus' do
+    erb :aboutus, layout: :layout
   end
 
-  get "/login" do
-    erb :login, :layout => :layout
-  end	
-	 
-  get "/signup" do
-    erb :signup, :layout => :layout
-  end	
+  get '/login' do
+    erb :login, layout: :layout
+  end
 
-  get "/forgotpass" do
-    erb :forgotpass, :layout => :layout
+  get '/signup' do
+    erb :signup, layout: :layout
   end
 
-  get "/editdocument" do
+  get '/forgotpass' do
+    erb :forgotpass, layout: :layout
+  end
+
+  get '/editdocument' do
     docedit = Document.first(id: params[:id])
-    if docedit.userstaged
-      @useredit = docedit.userstaged.split(', ')
-    end
+    @useredit = docedit.userstaged.split(', ') if docedit.userstaged
     @categoryedit = docedit.categorytaged
     @nameedit = docedit.name
     @dateedit = docedit.date
@@ -188,109 +176,104 @@ class App < Sinatra::Base
     erb :editpassword
   end
 
-  get "/subscribe" do
-    if Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id)).to_a.length > 0
+  get '/subscribe' do
+    if Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id))
+               .to_a.length.positive?
       @categories = Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id))
       @categories = Category.where(id: @categories)
     end
-    erb :suscat, :layout => :layout
+    erb :suscat, layout: :layout
   end
 
-  get "/upload" do
+  get '/upload' do
     @categories = Category.all
     @users = User.all
     set_unread_number
-    erb :upload, :layout => :layout
+    erb :upload, layout: :layout
   end
 
-  get "/newadmin" do
+  get '/newadmin' do
     @users = User.all
-    erb :newadmin, :layout=> :layout
+    erb :newadmin, layout: :layout
   end
 
   get '/notifications' do
     getdocs = Notification.select(:document_id).where(user_id: @current_user.id)
-    documents = Document.select(:id).where(id: getdocs,delete: false)
+    documents = Document.select(:id).where(id: getdocs, delete: false)
 
-    @notifications = Notification.where(user_id: @current_user.id,document_id: documents).order(:datetime).reverse
-    if params[:id] &&  Notification.first(document_id: params[:id],user_id: @current_user.id)
-      Notification.first(document_id: params[:id],user_id: @current_user.id).update(read: true)
+    @notifications = Notification.where(user_id: @current_user.id, document_id: documents).order(:datetime).reverse
+    if params[:id] && Notification.first(document_id: params[:id], user_id: @current_user.id)
+      Notification.first(document_id: params[:id], user_id: @current_user.id).update(read: true)
     end
     erb :notifications
   end
 
-  get "/mycategories" do
-    if @current_user.categories_dataset.to_a.length > 0
-      @categories =  @current_user.categories_dataset
-    end
-    erb :yourcats, :layout=> :layout
+  get '/mycategories' do
+    @categories = @current_user.categories_dataset if @current_user.categories_dataset.to_a.length.positive?
+    erb :yourcats, layout: :layout
   end
 
   get '/mydocuments' do
-      mydocs = @current_user.documents_dataset.where(delete: false)
-      mydocstaged = mydocs.select(:document_id).where(motive: 'taged')
-      mydocstagedsubs = mydocs.select(:document_id).where(motive: 'taged and subscribed')
-    if mydocstagedsubs.union(mydocstaged).count > 0
+    mydocs = @current_user.documents_dataset.where(delete: false)
+    mydocstaged = mydocs.select(:document_id).where(motive: 'taged')
+    mydocstagedsubs = mydocs.select(:document_id).where(motive: 'taged and subscribed')
+    if mydocstagedsubs.union(mydocstaged).count.positive?
       @documents = Document.where(id: mydocstagedsubs.union(mydocstaged))
     end
-    erb :yourdocs, :layout=> :layout
+    erb :yourdocs, layout: :layout
   end
 
-  get "/unsubscribe" do
-    if @current_user.categories_dataset.to_a.length > 0
-      @categories =  @current_user.categories_dataset
-    end
-    erb :deletecats, :layout=> :layout
+  get '/unsubscribe' do
+    @categories = @current_user.categories_dataset if @current_user.categories_dataset.to_a.length.positive?
+    erb :deletecats, layout: :layout
   end
 
-
-  get '/logout' do 
+  get '/logout' do
     session.clear
     redirect '/login'
   end
 
-
   post '/login' do
-    if params["password"] != "" && params["username"] != ""
+    if params['password'] != '' && params['username'] != ''
       usuario = User.find(username: params[:username])
       if usuario && usuario.password == params[:password]
         session[:user_id] = usuario.id
-        redirect "/documents"
+        redirect '/documents'
       else
-        @error ="Wrong username or password"
-        erb :login, :layout => :layout
+        @error = 'Wrong username or password'
+        erb :login, layout: :layout
       end
-      
+
     end
   end
 
-  post '/editprofile' do 
-    if params["password"] == @current_user.password
-      if (User.find(username: params[:username]) && User.find(username: params[:username]).id != @current_user.id) || /\A\w{3,15}\z/ !~ params[:username]
-        @errorusername = "The username is already in use or its invalid"
+  post '/editprofile' do
+    if params['password'] == @current_user.password
+      if (User.find(username: params[:username]) && User.find(username: params[:username]).id !=
+          @current_user.id) || /\A\w{3,15}\z/ !~ params[:username]
+        @errorusername = 'The username is already in use or its invalid'
       end
-      if (User.find(email: params[:email]) && User.find(email: params[:email]).id != @current_user.id )||  /\A.*@.*\..*\z/ !~ params[:email]                                                                                              
-        @erroremail = "The email is invalid"
+      if (User.find(email: params[:email]) && User.find(email: params[:email]).id != @current_user.id) ||
+         /\A.*@.*\..*\z/ !~ params[:email]
+        @erroremail = 'The email is invalid'
       end
       if @errorusername || @erroremail
         erb :editprofile
       else
-        @current_user.update(name: params[:fullname],username: params[:username],email: params[:email])
+        @current_user.update(name: params[:fullname], username: params[:username], email: params[:email])
         redirect '/documents'
       end
     else
-      @errorpassword = "La contraseña es incorrecta"
-      erb :editprofile  
+      @errorpassword = 'La contraseña es incorrecta'
+      erb :editprofile
     end
   end
 
   post '/editpassword' do
-    if params["currentpassword"] == @current_user.password
-      if params[:password] != params[:confPassword] 
-        @errorpasswordconf = "Passwords are not equal"
-      end
-      if params[:password].length < 5 || params[:password].length > 20 
-        @errorpasswordlength = "Password must be between 5 and 20 characters long"
+    if params['currentpassword'] == @current_user.password
+      @errorpasswordconf = 'Passwords are not equal' if params[:password] != params[:confPassword]
+      if params[:password].length < 5 || params[:password].length > 20
+        @errorpasswordlength = 'Password must be between 5 and 20 characters long'
       end
       if @errorpasswordconf || @errorpasswordlength
         erb :editprofile
@@ -299,215 +282,192 @@ class App < Sinatra::Base
         redirect '/documents'
       end
     else
-      @errorpassword = "La contraseña es incorrecta"
-      erb :editprofile  
+      @errorpassword = 'La contraseña es incorrecta'
+      erb :editprofile
     end
   end
 
-
-
   post '/signup' do
     if User.find(username: params[:username]) || /\A\w{3,15}\z/ !~ params[:username]
-      @errorusername = "The username is already in use or its invalid"
-    end
-    if   User.find(email: params[:email]) ||  /\A.*@.*\..*\z/ !~ params[:email]                                                                                              
-      @erroremail = "The email is invalid"
-    end
-    if params[:password] != params[:confPassword] 
-      @errorpasswordconf = "Passwords are not equal"
+      @errorusername = 'The username is already in use or its invalid'
     end
-    if params[:password].length < 5 || params[:password].length > 20 
-      @errorpasswordlength = "Password must be between 5 and 20 characters long"
+    @erroremail = 'The email is invalid' if User.find(email: params[:email]) || /\A.*@.*\..*\z/ !~ params[:email]
+    @errorpasswordconf = 'Passwords are not equal' if params[:password] != params[:confPassword]
+    if params[:password].length < 5 || params[:password].length > 20
+      @errorpasswordlength = 'Password must be between 5 and 20 characters long'
     end
     if !@errorusername && !@erroremail && !@errorpasswordconf && !@errorpasswordlength
       request.body.rewind
 
       hash = Rack::Utils.parse_nested_query(request.body.read)
-      params = JSON.parse hash.to_json 
-      user = User.new(name: params["fullname"], email: params["email"], username: params["username"], password: params["password"])
+      params = JSON.parse hash.to_json
+      user = User.new(name: params['fullname'], email: params['email'], username: params['username'],
+                      password: params['password'])
       if user.save
-          session[:user_id] = user.id
-          redirect "/documents"
-      else 
-        [500, {}, "Internal server Error"]
-      end 
+        session[:user_id] = user.id
+        redirect '/documents'
+      else
+        [500, {}, 'Internal server Error']
+      end
     else
-      erb :signup, :layout => :layout
+      erb :signup, layout: :layout
     end
   end
 
-  def array_to_tag (users)
-
-      if users && users != ""
-        tagged_users = ""
-        
-        users.each do |s|
-
-          if s.equal?(params[:users].last)
-
-            tagged_users += s 
-
-          else 
-
-            tagged_users += s + ", "
-
-           end
-        end
-
-        return tagged_users
+  def array_to_tag(users)
+    if users && users != ''
+      tagged_users = ''
+      users.each do |s|
+        tagged_users += if s.equal?(params[:users].last)
+                          s
+                        else
+                          s + ', '
+                        end
       end
+      tagged_users
+    end
   end
 
-# app.rb 
+  # app.rb
   post '/upload' do
-    if params["date"] != "" && params["title"] != ""  && params["categories"] != "" && params["document"] != ""  
+    if params['date'] != '' && params['title'] != '' && params['categories'] != '' && params['document'] != ''
       file = params[:document][:tempfile]
       @filename = params[:document][:filename]
-   
-      @src =  "/file/#{@filename}"
-      
-      category = Category.first(name: params["categories"])
 
-      doc = Document.new(date: params["date"], name: params["title"], userstaged: array_to_tag(params[:users]), categorytaged: params["categories"], document: @src,category_id: category.id)
-     
+      @src = "/file/#{@filename}"
+
+      category = Category.first(name: params['categories'])
+
+      doc = Document.new(date: params['date'], name: params['title'], userstaged: array_to_tag(params[:users]), categorytaged: params['categories'], document: @src, category_id: category.id)
+
       if doc.save
-        
         doc.update(document: doc.id)
         cp(file.path, "public/file/#{doc.id}.pdf")
-        
-        
-        tag(params["users"],doc) 
-
 
+        tag(params['users'], doc)
 
         set_notifications_number
 
-        @success = "The document has been uploaded"
+        @success = 'The document has been uploaded'
         @categories = Category.all
         @users = User.all
         set_unread_number
-        erb :upload, :layout => :layout
-       
-      else 
-        @error = "An error has ocurred when trying to upload the document"
+        erb :upload, layout: :layout
+      else
+        @error = 'An error has ocurred when trying to upload the document'
         @categories = Category.all
         set_unread_number
-        erb :upload, :layout => :layout
+        erb :upload, layout: :layout
       end
     end
-
   end
 
   post '/subscribe' do
-    category = Category.first(name: params["categories"])
-    if @current_user && category 
-          category.add_user(@current_user)
-          if category.save
-            @success ="You are now subscribed to #{params[:categories]}!"
-            if Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id)).to_a.length > 0
-              @categories = Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id))
-              @categories = Category.where(id: @categories)
-            end
-            erb :suscat, :layout => :layout
-          else
-            @error ="You are already subscribed to #{params[:categories]}!"
-            if Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id)).to_a.length > 0
-              @categories = Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id))
-              @categories = Category.where(id: @categories)
-            end
-            erb :suscat, :layout => :layout
-          end
-    end      
+    category = Category.first(name: params['categories'])
+    if @current_user && category
+      category.add_user(@current_user)
+      if category.save
+        @success = "You are now subscribed to #{params[:categories]}!"
+        if Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id)).to_a.length.positive?
+          @categories = Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id))
+          @categories = Category.where(id: @categories)
+        end
+        erb :suscat, layout: :layout
+      else
+        @error = "You are already subscribed to #{params[:categories]}!"
+        if Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id)).to_a.length.positive?
+          @categories = Category.select(:id).except(Subscription.select(:category_id).where(user_id: @current_user.id))
+          @categories = Category.where(id: @categories)
+        end
+        erb :suscat, layout: :layout
+      end
+    end
   end
 
   post '/newadmin' do
-    if User.find(username: params[:username]) 
+    if User.find(username: params[:username])
       if User.find(username: params[:username]) && User.find(username: params[:username]).role == 'admin'
         @error = "#{params[:username]} is already an admin or does not exist"
-        erb  :newadmin, :layout => :layout
+        erb :newadmin, layout: :layout
       else
         User.where(username: params[:username]).update(role: 'admin')
         @success = "#{params[:username]} has been promoted to admin"
-        erb  :newadmin, :layout => :layout
+        erb :newadmin, layout: :layout
       end
-    else 
+    else
       @error = "An error has ocurred when trying to promote #{params[:username]} to admin"
-      erb  :newadmin, :layout => :layout
+      erb :newadmin, layout: :layout
     end
   end
 
   post '/unsubscribe' do
-    category = Category.first(name: params["category"])
+    category = Category.first(name: params['category'])
     if @current_user && category && @current_user.remove_category(category)
       @success = "You have been unsubscribed from #{params[:category]}"
-      if @current_user.categories_dataset.to_a.length > 0
-        @categories =  @current_user.categories_dataset
-      end
-      erb  :deletecats, :layout => :layout
+      @categories = @current_user.categories_dataset if @current_user.categories_dataset.to_a.length.positive?
+      erb :deletecats, layout: :layout
     else
       @error = "An error has ocurred when trying unsubscribe you from #{params[:category]}"
-      @categories =  @current_user.categories_dataset
-      erb  :deletecats, :layout => :layout
+      @categories = @current_user.categories_dataset
+      erb :deletecats, layout: :layout
     end
   end
 
   post '/documents' do
     @page = set_page
     @docsperpage = 12
-    cargdocs = filter(params[:users],params[:date],params[:category])
-    @documents = cargdocs[((@page.to_i - 1) * @docsperpage) ..  (@page.to_i * @docsperpage)-1]
+    cargdocs = filter(params[:users], params[:date], params[:category])
+    @documents = cargdocs[((@page.to_i - 1) * @docsperpage)..(@page.to_i * @docsperpage) - 1]
     cant_pages(cargdocs.length)
     @view = params[:forma]
 
-    @filtros = [params[:users],params[:date],params[:category]]
-    
-   
+    @filtros = [params[:users], params[:date], params[:category]]
+
     @categories = Category.all
-    erb :docs, :layout => :layout
+    erb :docs, layout: :layout
   end
 
   get '/view' do
-    document = Document.select(:document).first(id: params["id"])
+    document = Document.select(:document).first(id: params['id'])
     if document
       doc = document.document
-      @src = "/file/" + doc + ".pdf"
-      if params[:read] == "true" && session[:user_id]
-        Notification.first(document_id: params["id"],user_id: session[:user_id]).update(read: true)
+      @src = '/file/' + doc + '.pdf'
+      if params[:read] == 'true' && session[:user_id]
+        Notification.first(document_id: params['id'], user_id: session[:user_id]).update(read: true)
         set_notifications_number
       end
-      erb :preview, :layout=> :doclayout
-    else 
-      redirect '/documents' 
+      erb :preview, layout: :doclayout
+    else
+      redirect '/documents'
     end
   end
 
   post '/editdocument' do
-    category = Category.first(name: params["categories"])
+    category = Category.first(name: params['categories'])
     editdoc = Document.first(id: params[:id])
 
-    doc = Document.new(date: params["date"], name: params["title"], userstaged: array_to_tag(params[:users]), categorytaged: params["categories"],category_id: category.id,document: editdoc.document)
+    doc = Document.new(date: params['date'], name: params['title'], userstaged: array_to_tag(params[:users]), categorytaged: params['categories'], category_id: category.id, document: editdoc.document)
     if doc.save
       editdoc.update(delete: true)
       set_notifications_number
-      tag(params["users"],doc)
+      tag(params['users'], doc)
       redirect '/documents'
     else
-      @error = "An error has ocurred when trying edit the document"
+      @error = 'An error has ocurred when trying edit the document'
       set_unread_number
       erb :editinfo
-    end    
-  end 
+    end
+  end
 
   post '/forgotpass' do
     if User.find(email: params[:email])
       redirect "/insertcode?email=#{params[:email]}"
-    elsif
-      @error = "The email account does not exists"
+    elsif @error == 'The email account does not exists'
       erb :forgotpass
     end
   end
 
-  get '/insertcode' do 
+  get '/insertcode' do
     erb :insertcode
   end
 
@@ -515,10 +475,9 @@ class App < Sinatra::Base
     if params[:realcode] == params[:coderec]
       redirect "/newpass?email=#{params[:email]}"
     else
-      @error = "The code is not a match"
-      erb :insertcode     
+      @error = 'The code is not a match'
+      erb :insertcode
     end
-
   end
 
   get '/newpass' do
@@ -527,68 +486,63 @@ class App < Sinatra::Base
 
   post '/newpass' do
     user = User.find(email: params[:email])
-    if params[:password] != params[:confPassword] 
-      @errorpasswordconf = "Passwords are not equal"
-    end
-    if params[:password].length < 5 || params[:password].length > 20 
-      @errorpasswordlength = "Password must be between 5 and 20 characters long"
+    @errorpasswordconf = 'Passwords are not equal' if params[:password] != params[:confPassword]
+    if params[:password].length < 5 || params[:password].length > 20
+      @errorpasswordlength = 'Password must be between 5 and 20 characters long'
     end
     if user
-      user.update(password: params[:password])      
+      user.update(password: params[:password])
       session[:user_id] = user.id
     end
     redirect '/documents'
   end
 
-
-  def send_code_email(useremail,user)
+  def send_code_email(useremail, user)
     @code = rand.to_s[2..6]
     @user = user.name
 
     Pony.mail({
-      :to => useremail, 
-      :via => :smtp, 
-      :via_options => {
-        :address => 'smtp.gmail.com',                     
-        :port => '587',
-        :user_name => 'documentuploadsystem@gmail.com',
-        :password => 'rstmezqnvkygptjl',
-        :authentication => :plain,
-        :domain => "gmail.com",
-      },
-        :subject => 'DUNS Verification code', 
-        :headers => { 'Content-Type' => 'text/html' },
-        :body => erb(:retrieve, layout: false)
-      }
-    )
-
-    return @code
-  end
-
-
-  def set_notifications_number 
-      settings.sockets.each{|s| 
-        getdocs = Notification.select(:document_id).where(user_id: s[:user])
-        documents = Document.select(:id).where(id: getdocs,delete: false)
-        unread = Notification.where(user_id: s[:user],document_id: documents,read: false).to_a.length
-        s[:socket].send(unread.to_s)
-      } 
-  end
-
-   def set_unread_number
+                to: useremail,
+                via: :smtp,
+                via_options: {
+                  address: 'smtp.gmail.com',
+                  port: '587',
+                  user_name: 'documentuploadsystem@gmail.com',
+                  password: 'rstmezqnvkygptjl',
+                  authentication: :plain,
+                  domain: 'gmail.com'
+                },
+                subject: 'DUNS Verification code',
+                headers: { 'Content-Type' => 'text/html' },
+                body: erb(:retrieve, layout: false)
+              })
+
+    @code
+  end
+
+  def set_notifications_number
+    settings.sockets.each do |s|
+      getdocs = Notification.select(:document_id).where(user_id: s[:user])
+      documents = Document.select(:id).where(id: getdocs, delete: false)
+      unread = Notification.where(user_id: s[:user], document_id: documents, read: false).to_a.length
+      s[:socket].send(unread.to_s)
+    end
+  end
+
+  def set_unread_number
     if @current_user
       getdocs = Notification.select(:document_id).where(user_id: @current_user.id)
-      documents = Document.select(:id).where(id: getdocs,delete: false)
-      @unread = Notification.where(user_id: @current_user.id,document_id: documents,read: false).to_a.length
+      documents = Document.select(:id).where(id: getdocs, delete: false)
+      @unread = Notification.where(user_id: @current_user.id, document_id: documents, read: false).to_a.length
     end
   end
-  
+
   def user_not_logger_in?
     !session[:user_id]
   end
 
   def restricted_path?
-    request.path_info == '/subscribe' || request.path_info == '/mycategories' || request.path_info == '/mydocuments' || request.path_info == '/edityourprofile' ||  request.path_info == '/newadmin' ||  request.path_info == '/upload' ||  request.path_info == '/unsubscribe' || request.path_info == '/editdocument' 
+    request.path_info == '/subscribe' || request.path_info == '/mycategories' || request.path_info == '/mydocuments' || request.path_info == '/edityourprofile' || request.path_info == '/newadmin' || request.path_info == '/upload' || request.path_info == '/unsubscribe' || request.path_info == '/editdocument'
   end
 
   def session_path?
@@ -600,61 +554,57 @@ class App < Sinatra::Base
   end
 
   def not_authorized_user?
-    @current_user.role == "user"
-  end 
+    @current_user.role == 'user'
+  end
 
-  def filter (userfilter, datefilter, categoryfilter)
+  def filter(userfilter, datefilter, categoryfilter)
     filter_docs = []
-      user = User.first(username: userfilter) 
+    user = User.first(username: userfilter)
 
-      if user
-        filter_docs = user.documents_dataset.where(motive: "taged", delete: false).order(:date).to_a
-        filter_docs = filter_docs + user.documents_dataset.where(motive: "taged and subscribed", delete: false).order(:date).to_a
-      else
-        filter_docs = Document.where(delete: false).order(:date).reverse.all
-      end
-      doc_date = datefilter == "" ? filter_docs : Document.first(date: datefilter)
-      if doc_date
-        filter_docs = datefilter == "" ? filter_docs : filter_docs.select {|d| d.date == doc_date.date } 
-      else
-        filter_docs = []
-      end  
-      category = Category.first(name: categoryfilter)
-      filter_docs = categoryfilter == "" ? filter_docs : filter_docs.select {|d| d.category_id == category.id }
-      return filter_docs
+    if user
+      filter_docs = user.documents_dataset.where(motive: 'taged', delete: false).order(:date).to_a
+      filter_docs += user.documents_dataset.where(motive: 'taged and subscribed', delete: false).order(:date).to_a
+    else
+      filter_docs = Document.where(delete: false).order(:date).reverse.all
+    end
+    doc_date = datefilter == '' ? filter_docs : Document.first(date: datefilter)
+    filter_docs = if doc_date
+                    datefilter == '' ? filter_docs : filter_docs.select { |d| d.date == doc_date.date }
+                  else
+                    []
+                  end
+    category = Category.first(name: categoryfilter)
+    filter_docs = categoryfilter == '' ? filter_docs : filter_docs.select { |d| d.category_id == category.id }
+    filter_docs
   end
 
-  def tag (users,doc)
+  def tag(users, doc)
+    if users
 
-    if users 
-      
       usuario = users
       usuario.each do |userr|
-     
         user = User.first(username: userr)
-        if user 
-          user.add_document(doc)
-          user.save
-          Notification.where(user_id: user.id,document_id: doc.id).update(motive: "taged",datetime: Time.now)
-          send_email(user.email, doc, user.username, 'taged')
-        end
-      end    
+        next unless user
+
+        user.add_document(doc)
+        user.save
+        Notification.where(user_id: user.id, document_id: doc.id).update(motive: 'taged', datetime: Time.now)
+        send_email(user.email, doc, user.username, 'taged')
+      end
 
       suscribeds = Subscription.where(category_id: doc.category_id)
       suscribeds.each do |suscribed|
         suscr = User.first(id: suscribed.user_id)
-        if suscr && Notification.find(user_id: suscr.id,document_id: doc.id)
-          Notification.where(user_id: suscr.id,document_id: doc.id).update(motive: "taged and subscribed")
+        if suscr && Notification.find(user_id: suscr.id, document_id: doc.id)
+          Notification.where(user_id: suscr.id, document_id: doc.id).update(motive: 'taged and subscribed')
           send_email(suscr.email, doc, suscr.username, 'taged and subscribed')
-        elsif suscr 
+        elsif suscr
           suscr.add_document(doc)
           suscr.save
-          Notification.where(user_id: suscr.id,document_id: doc.id).update(motive: "subscribed",datetime: Time.now)
+          Notification.where(user_id: suscr.id, document_id: doc.id).update(motive: 'subscribed', datetime: Time.now)
           send_email(suscr.email, doc, suscr.username, 'subscribed')
         end
-      end  
+      end
     end
   end
-
-end 
-
+end
diff --git a/config.ru b/config.ru
index 6f3ce25..f5f85dd 100644
--- a/config.ru
+++ b/config.ru
@@ -1,16 +1,17 @@
-require "bundler"
-require "sinatra"
-require 'sequel'
+# frozen_string_literal: true
 
+require 'bundler'
+require 'sinatra'
+require 'sequel'
 
 Bundler.require
 # Create a connection and leave it as a global object in our project
 DB = Sequel.connect(
-adapter: 'postgres',
-database: 'notificator-development',
-host: 'db',
-user: 'unicorn',
-password: 'magic')
-require "./app.rb"
+  adapter: 'postgres',
+  database: 'notificator-development',
+  host: 'db',
+  user: 'unicorn',
+  password: 'magic'
+)
+require './app.rb'
 run App
-
diff --git a/db/migrations/0001_create_users.rb b/db/migrations/0001_create_users.rb
index ff7e8e1..46762c9 100644
--- a/db/migrations/0001_create_users.rb
+++ b/db/migrations/0001_create_users.rb
@@ -1,15 +1,16 @@
-Sequel.migration do                                                                                           
-  up do                                                                                                       
-    create_table(:users) do                                                                                   
-      primary_key :id                                                                                         
-      String :name, null: false 
+# frozen_string_literal: true
+
+Sequel.migration do
+  up do
+    create_table(:users) do
+      primary_key :id
+      String :name, null: false
       String :email, null: false
       String :username, null: false
       String :password, null: false
-
-    end                                                                                                       
-  end                                                                                                         
-  down do                                                                                                     
-    drop_table(:users)                                                                                        
-  end                                                                                                         
-end
\ No newline at end of file
+    end
+  end
+  down do
+    drop_table(:users)
+  end
+end
diff --git a/db/migrations/0002_create_documents.rb b/db/migrations/0002_create_documents.rb
index bf08fdf..f055ef4 100644
--- a/db/migrations/0002_create_documents.rb
+++ b/db/migrations/0002_create_documents.rb
@@ -1,15 +1,17 @@
-Sequel.migration do                                                                                           
-        up do                                                                                                       
-          create_table(:documents) do                                                                                   
-            primary_key :id                                                                                         
-            String :name, null: false
-            Date :date, null: false
-            String :userstaged, null: false
-            String :categorytaged, null: false
-            String :document, null: false                                                                              
-          end                                                                                                       
-        end                                                                                                         
-        down do                                                                                                     
-          drop_table(:documents)                                                                                        
-        end                                                                                                         
-      end
\ No newline at end of file
+# frozen_string_literal: true
+
+Sequel.migration do
+  up do
+    create_table(:documents) do
+      primary_key :id
+      String :name, null: false
+      Date :date, null: false
+      String :userstaged, null: false
+      String :categorytaged, null: false
+      String :document, null: false
+    end
+  end
+  down do
+    drop_table(:documents)
+  end
+end
diff --git a/db/migrations/0003_create_categories.rb b/db/migrations/0003_create_categories.rb
index 74fd4ee..6afa0e1 100644
--- a/db/migrations/0003_create_categories.rb
+++ b/db/migrations/0003_create_categories.rb
@@ -1,11 +1,13 @@
-Sequel.migration do                                                                                           
-        up do                                                                                                       
-          create_table(:categories) do                                                                                   
-            primary_key :id                                                                                         
-            String :name, null: false                                                                               
-          end                                                                                                       
-        end                                                                                                         
-        down do                                                                                                     
-          drop_table(:categories)                                                                                        
-        end                                                                                                         
-      end
\ No newline at end of file
+# frozen_string_literal: true
+
+Sequel.migration do
+  up do
+    create_table(:categories) do
+      primary_key :id
+      String :name, null: false
+    end
+  end
+  down do
+    drop_table(:categories)
+  end
+end
diff --git a/db/migrations/0004_users_type.rb b/db/migrations/0004_users_type.rb
index 32caf9f..0c77f38 100644
--- a/db/migrations/0004_users_type.rb
+++ b/db/migrations/0004_users_type.rb
@@ -1,13 +1,12 @@
-Sequel.migration do 
+# frozen_string_literal: true
 
-	up do
-		add_column :users, :type, String, null: false
-		set_column_default :users, :type, 'user'  
-	end
-	
+Sequel.migration do
+  up do
+    add_column :users, :type, String, null: false
+    set_column_default :users, :type, 'user'
+  end
 
-	down do 
-		drop_column :users, :type
-	end
-
-end
\ No newline at end of file
+  down do
+    drop_column :users, :type
+  end
+end
diff --git a/db/migrations/0005_create_categories_users.rb b/db/migrations/0005_create_categories_users.rb
index 9512a0d..de41b4e 100644
--- a/db/migrations/0005_create_categories_users.rb
+++ b/db/migrations/0005_create_categories_users.rb
@@ -1,13 +1,15 @@
+# frozen_string_literal: true
+
 Sequel.migration do
-	up do
-		create_table(:categories_users) do
-		  foreign_key :category_id, :categories, :null=>false
-		  foreign_key :user_id, :users, :null=>false
-		  primary_key [:category_id, :user_id]
-		  index [:category_id, :user_id]
-	 end
- end
-	 down do
-		 drop_table :categories_users
-	 end
-end
\ No newline at end of file
+  up do
+    create_table(:categories_users) do
+      foreign_key :category_id, :categories, null: false
+      foreign_key :user_id, :users, null: false
+      primary_key %i[category_id user_id]
+      index %i[category_id user_id]
+    end
+  end
+  down do
+    drop_table :categories_users
+  end
+end
diff --git a/db/migrations/0006_create_documents_users.rb b/db/migrations/0006_create_documents_users.rb
index 02f5102..42bc969 100644
--- a/db/migrations/0006_create_documents_users.rb
+++ b/db/migrations/0006_create_documents_users.rb
@@ -1,13 +1,15 @@
+# frozen_string_literal: true
+
 Sequel.migration do
-	up do
-		create_table(:documents_users) do
-		  foreign_key :document_id, :documents, :null=>false
-		  foreign_key :user_id, :users, :null=>false
-		  primary_key [:document_id, :user_id]
-		  index [:document_id, :user_id]
-	 end
- end
-	 down do
-		 drop_table :categories_users
-	 end
-end
\ No newline at end of file
+  up do
+    create_table(:documents_users) do
+      foreign_key :document_id, :documents, null: false
+      foreign_key :user_id, :users, null: false
+      primary_key %i[document_id user_id]
+      index %i[document_id user_id]
+    end
+  end
+  down do
+    drop_table :categories_users
+  end
+end
diff --git a/db/migrations/0007_create_relation _categorydocument.rb b/db/migrations/0007_create_relation _categorydocument.rb
index 8efc440..4f6d20a 100644
--- a/db/migrations/0007_create_relation _categorydocument.rb	
+++ b/db/migrations/0007_create_relation _categorydocument.rb	
@@ -1,7 +1,9 @@
+# frozen_string_literal: true
+
 Sequel.migration do
-	up do
-		alter_table(:documents) do
-        add_foreign_key :category_id, :categories, :null=>false
-        end
-	end
-end
\ No newline at end of file
+  up do
+    alter_table(:documents) do
+      add_foreign_key :category_id, :categories, null: false
+    end
+  end
+end
diff --git a/db/migrations/0008_rename_type_as_role_users.rb b/db/migrations/0008_rename_type_as_role_users.rb
index bb2fe5f..ce24391 100644
--- a/db/migrations/0008_rename_type_as_role_users.rb
+++ b/db/migrations/0008_rename_type_as_role_users.rb
@@ -1,7 +1,9 @@
+# frozen_string_literal: true
+
 Sequel.migration do
-	up do
-		alter_table :users do
-			rename_column :type, :role
-		end
-	end
-end
\ No newline at end of file
+  up do
+    alter_table :users do
+      rename_column :type, :role
+    end
+  end
+end
diff --git a/db/migrations/0009_add_motive_notification.rb b/db/migrations/0009_add_motive_notification.rb
index ccc6914..e9a1c25 100644
--- a/db/migrations/0009_add_motive_notification.rb
+++ b/db/migrations/0009_add_motive_notification.rb
@@ -1,12 +1,11 @@
-Sequel.migration do 
+# frozen_string_literal: true
 
-	up do
-		add_column :documents_users, :motive, String  
-	end
-	
+Sequel.migration do
+  up do
+    add_column :documents_users, :motive, String
+  end
 
-	down do 
-		drop_column :users, :type
-	end
-
-end
\ No newline at end of file
+  down do
+    drop_column :users, :type
+  end
+end
diff --git a/db/migrations/0010_add_datetime_read_notifications.rb b/db/migrations/0010_add_datetime_read_notifications.rb
index 595627c..1247043 100644
--- a/db/migrations/0010_add_datetime_read_notifications.rb
+++ b/db/migrations/0010_add_datetime_read_notifications.rb
@@ -1,15 +1,14 @@
-Sequel.migration do 
+# frozen_string_literal: true
 
-	up do
-		add_column :documents_users, :read, TrueClass
-		set_column_default :documents_users, :read, false
-		add_column :documents_users, :datetime, DateTime
-	end
-	
+Sequel.migration do
+  up do
+    add_column :documents_users, :read, TrueClass
+    set_column_default :documents_users, :read, false
+    add_column :documents_users, :datetime, DateTime
+  end
 
-	down do 
-		drop_column :documents_users, :read
-		drop_column :documents_users, :datetime
-	end
-
-end
\ No newline at end of file
+  down do
+    drop_column :documents_users, :read
+    drop_column :documents_users, :datetime
+  end
+end
diff --git a/db/migrations/0011_add_documents_logical_delete.rb b/db/migrations/0011_add_documents_logical_delete.rb
index 91a6126..5a258cd 100644
--- a/db/migrations/0011_add_documents_logical_delete.rb
+++ b/db/migrations/0011_add_documents_logical_delete.rb
@@ -1,13 +1,12 @@
-Sequel.migration do 
+# frozen_string_literal: true
 
-	up do
-		add_column :documents, :delete, TrueClass
-		set_column_default :documents, :delete, false  
-	end
-	
+Sequel.migration do
+  up do
+    add_column :documents, :delete, TrueClass
+    set_column_default :documents, :delete, false
+  end
 
-	down do 
-		drop_column :documents, :delete
-	end
-
-end
\ No newline at end of file
+  down do
+    drop_column :documents, :delete
+  end
+end
diff --git a/db/migrations/0012_set_nulleable_userstaged_userstable.rb b/db/migrations/0012_set_nulleable_userstaged_userstable.rb
index 5c6c3a9..1e7a053 100644
--- a/db/migrations/0012_set_nulleable_userstaged_userstable.rb
+++ b/db/migrations/0012_set_nulleable_userstaged_userstable.rb
@@ -1,7 +1,9 @@
-Sequel.migration do                                                                                           
-    up do 
-    	alter_table :documents  do
-    		set_column_allow_null :userstaged 
-    	end                                                                                                       
+# frozen_string_literal: true
+
+Sequel.migration do
+  up do
+    alter_table :documents do
+      set_column_allow_null :userstaged
     end
-end
\ No newline at end of file
+  end
+end
diff --git a/models/category.rb b/models/category.rb
index 00673ef..eb67948 100644
--- a/models/category.rb
+++ b/models/category.rb
@@ -1,11 +1,13 @@
-class Category < Sequel::Model 
-	plugin :validation_helpers
-    def validate
+# frozen_string_literal: true
+
+class Category < Sequel::Model
+  plugin :validation_helpers
+  def validate
     super
-		validates_presence [:name]
-		validates_unique [:name]
-  	end
-	many_to_many  :users
-	one_to_many :documents
-	set_primary_key :id
+    validates_presence [:name]
+    validates_unique [:name]
+  end
+  many_to_many :users
+  one_to_many :documents
+  set_primary_key :id
 end
diff --git a/models/document.rb b/models/document.rb
index 5053463..95a3197 100644
--- a/models/document.rb
+++ b/models/document.rb
@@ -1,10 +1,12 @@
+# frozen_string_literal: true
+
 class Document < Sequel::Model
-	plugin :validation_helpers
-    def validate
+  plugin :validation_helpers
+  def validate
     super
-        validates_presence [:date, :name, :categorytaged, :document]
-  	end
-	many_to_one  :categories
-	many_to_many  :users
-	set_primary_key :id
+    validates_presence %i[date name categorytaged document]
+  end
+  many_to_one :categories
+  many_to_many :users
+  set_primary_key :id
 end
diff --git a/models/init.rb b/models/init.rb
index 12a52a2..ba602ad 100644
--- a/models/init.rb
+++ b/models/init.rb
@@ -1,5 +1,7 @@
+# frozen_string_literal: true
+
 require_relative 'user'
 require_relative 'document'
 require_relative 'category'
 require_relative 'subscription'
-require_relative 'notification'
\ No newline at end of file
+require_relative 'notification'
diff --git a/models/notification.rb b/models/notification.rb
index 9fb1fc5..067a519 100644
--- a/models/notification.rb
+++ b/models/notification.rb
@@ -1,4 +1,6 @@
+# frozen_string_literal: true
+
 class Notification < Sequel::Model(:documents_users)
-	many_to_one  :document
-	many_to_one :user
-end
\ No newline at end of file
+  many_to_one :document
+  many_to_one :user
+end
diff --git a/models/subscription.rb b/models/subscription.rb
index 003dc62..6a9e014 100644
--- a/models/subscription.rb
+++ b/models/subscription.rb
@@ -1,4 +1,6 @@
+# frozen_string_literal: true
+
 class Subscription < Sequel::Model(:categories_users)
-	many_to_one  :category
-	many_to_one :user
+  many_to_one :category
+  many_to_one :user
 end
diff --git a/models/user.rb b/models/user.rb
index d1e78b8..fc3304d 100644
--- a/models/user.rb
+++ b/models/user.rb
@@ -1,16 +1,18 @@
-class User < Sequel::Model 
-    plugin :validation_helpers
-    def validate
+# frozen_string_literal: true
+
+class User < Sequel::Model
+  plugin :validation_helpers
+  def validate
     super
-        validates_presence [:email, :name, :password, :username]
-        validates_unique(:email, :username)
-        validates_min_length 5, :password
-        validates_max_length 20, :password
-        validates_unique(:email, :username)
-        validates_format /\A.*@.*\..*\z/, :email, message: 'is not a valid email'
-        validates_format /\A\w{3,15}\z/, :username, message: 'is not a valid username'
-    end
-    many_to_many  :categories
-    many_to_many :documents
-    set_primary_key :id
+    validates_presence %i[email name password username]
+    validates_unique(:email, :username)
+    validates_min_length 5, :password
+    validates_max_length 20, :password
+    validates_unique(:email, :username)
+    validates_format(/\A.*@.*\..*\z/, :email, message: 'is not a valid email')
+    validates_format(/\A\w{3,15}\z/, :username, message: 'is not a valid username')
+  end
+  many_to_many :categories
+  many_to_many :documents
+  set_primary_key :id
 end
diff --git a/tests/models/category_tests.rb b/tests/models/category_tests.rb
index a0faf04..2020f9b 100644
--- a/tests/models/category_tests.rb
+++ b/tests/models/category_tests.rb
@@ -1,20 +1,19 @@
-require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class UserTest < MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
 
-  MiniTest::Unit::TestCase   
+class UserTest < MiniTest::Unit::TestCase
+  MiniTest::Unit::TestCase
 
   def test_name_presence
-
     @cat = Category.new
 
     @cat.name = nil
 
     assert_equal @cat.valid?, false
 
-    @cat.name = "COVID-19"
+    @cat.name = 'COVID-19'
 
     assert_equal @cat.valid?, true
-
   end
 end
diff --git a/tests/models/document_tests.rb b/tests/models/document_tests.rb
index b9ee71d..b48712f 100644
--- a/tests/models/document_tests.rb
+++ b/tests/models/document_tests.rb
@@ -1,81 +1,71 @@
-require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class UserTest < MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
 
-  MiniTest::Unit::TestCase   
+class UserTest < MiniTest::Unit::TestCase
+  MiniTest::Unit::TestCase
 
   def test_name_presence
-
     @doc = Document.new
 
     @doc.name = nil
-    @doc.date = "2020-05-10"
-    @doc.userstaged = "john,jane"
-    @doc.categorytaged = "Scolarships"
-    @doc.document = "doc.pdf"
+    @doc.date = '2020-05-10'
+    @doc.userstaged = 'john,jane'
+    @doc.categorytaged = 'Scolarships'
+    @doc.document = 'doc.pdf'
 
     assert_equal @doc.valid?, false
 
     @doc.name = "Nigerian Prince's Will"
 
     assert_equal @doc.valid?, true
-
   end
 
   def test_date_presence
-
     @doc = Document.new
 
     @doc.name = "Nigerian Prince's Will"
     @doc.date = nil
-    @doc.userstaged = "john,jane"
-    @doc.categorytaged = "Scolarships"
-    @doc.document = "doc.pdf"
+    @doc.userstaged = 'john,jane'
+    @doc.categorytaged = 'Scolarships'
+    @doc.document = 'doc.pdf'
 
     assert_equal @doc.valid?, false
 
-    @doc.date = "2020-04-19"
+    @doc.date = '2020-04-19'
 
     assert_equal @doc.valid?, true
-
   end
 
   def test_category_presence
-
     @doc = Document.new
 
-    @doc.name = "Wire Transfer Receipt"
-    @doc.date = "2020-05-10"
-    @doc.userstaged = "princeofnigeria,me"
+    @doc.name = 'Wire Transfer Receipt'
+    @doc.date = '2020-05-10'
+    @doc.userstaged = 'princeofnigeria,me'
     @doc.categorytaged = nil
-    @doc.document = "doc.pdf"
+    @doc.document = 'doc.pdf'
 
     assert_equal @doc.valid?, false
 
-    @doc.categorytaged = "Scams"
+    @doc.categorytaged = 'Scams'
 
     assert_equal @doc.valid?, true
-
   end
 
   def test_document_presence
-
     @doc = Document.new
 
-    @doc.name = "Whatever"
-    @doc.date = "2020-05-10"
-    @doc.userstaged = "john,jane"
-    @doc.categorytaged = "Scolarships"
+    @doc.name = 'Whatever'
+    @doc.date = '2020-05-10'
+    @doc.userstaged = 'john,jane'
+    @doc.categorytaged = 'Scolarships'
     @doc.document = nil
 
     assert_equal @doc.valid?, false
 
-    @doc.document = "something.pdf"
+    @doc.document = 'something.pdf'
 
     assert_equal @doc.valid?, true
-
   end
-
 end
-
-
diff --git a/tests/models/user_tests.rb b/tests/models/user_tests.rb
index 9a0daf6..6088988 100644
--- a/tests/models/user_tests.rb
+++ b/tests/models/user_tests.rb
@@ -1,138 +1,122 @@
-require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class UserTest < MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
 
-  MiniTest::Unit::TestCase    
+class UserTest < MiniTest::Unit::TestCase
+  MiniTest::Unit::TestCase
   def test_name_presence
-
     @user = User.new
 
     @user.name = nil
-    @user.username = "john"
-    @user.email = "johndo@email.com"
-    @user.password = "12345"
+    @user.username = 'john'
+    @user.email = 'johndo@email.com'
+    @user.password = '12345'
 
     assert_equal @user.valid?, false
 
-    @user.name = "John Doe"
+    @user.name = 'John Doe'
 
     assert_equal @user.valid?, true
-
   end
 
   def test_username_presence
-
     @user = User.new
 
-    @user.name = "John Doe"
+    @user.name = 'John Doe'
     @user.username = nil
-    @user.email = "johndo@email.com"
-    @user.password = "12345"
+    @user.email = 'johndo@email.com'
+    @user.password = '12345'
 
     assert_equal @user.valid?, false
 
-    @user.username = "john"
+    @user.username = 'john'
 
     assert_equal @user.valid?, true
-
   end
 
-
-
   def test_email_presence
-
     @user = User.new
-    @user.name = "John Doe"
-    @user.username = "john"
+    @user.name = 'John Doe'
+    @user.username = 'john'
     @user.email = nil
-    @user.password = "12345"
+    @user.password = '12345'
 
     assert_equal @user.valid?, false
 
-    @user.email = "johndoe@mail.com"
+    @user.email = 'johndoe@mail.com'
 
     assert_equal @user.valid?, true
-
   end
 
   def test_password_presence
-
     @user = User.new
-    @user.name = "John Doe"
-    @user.username = "john"
-    @user.email = "johndoe@mail.com"
+    @user.name = 'John Doe'
+    @user.username = 'john'
+    @user.email = 'johndoe@mail.com'
     @user.password = nil
 
     assert_equal @user.valid?, false
 
-    @user.password = "12345"
+    @user.password = '12345'
 
     assert_equal @user.valid?, true
-
   end
 
-
   def test_email_format
-
     @user = User.new
-    @user.name = "John Doe"
-    @user.username = "john"
-    @user.email = "johndoemailcom"
-    @user.password = "12345"
+    @user.name = 'John Doe'
+    @user.username = 'john'
+    @user.email = 'johndoemailcom'
+    @user.password = '12345'
 
     assert_equal @user.valid?, false
 
-    @user.email = "johndoe@email.com"
+    @user.email = 'johndoe@email.com'
 
     assert_equal @user.valid?, true
-
-  end 
+  end
 
   def test_username_format
-
     @user = User.new
-    @user.name = "John Doe"
-    @user.username = "john,doe"
-    @user.email = "johndo@email.com"
-    @user.password = "12345"
+    @user.name = 'John Doe'
+    @user.username = 'john,doe'
+    @user.email = 'johndo@email.com'
+    @user.password = '12345'
 
     assert_equal @user.valid?, false
 
-    @user.username = "john doe"
+    @user.username = 'john doe'
 
     assert_equal @user.valid?, false
 
-    @user.username = "jo"
+    @user.username = 'jo'
 
     assert_equal @user.valid?, false
 
-    @user.username = "johndoe"
+    @user.username = 'johndoe'
 
     assert_equal @user.valid?, true
-
   end
 
-
   def test_password_length
-
     @user = User.new
-    @user.name = "John Doe"
-    @user.username = "john"
-    @user.email = "johndo@email.com"
-    @user.password = "123"
+    @user.name = 'John Doe'
+    @user.username = 'john'
+    @user.email = 'johndo@email.com'
+    @user.password = '123'
 
     assert_equal @user.valid?, false
 
-    @user.password = "012345678901234567890"
+    @user.password = '012345678901234567890'
 
     assert_equal @user.valid?, false
 
-    @user.password = "0123456789"
+    @user.password = '0123456789'
 
     assert_equal @user.valid?, true
   end
 
-  ##TODO: Add uniqueness constraint in database in order to test for that property
+  # #TODO: Add uniqueness constraint in database in order to test for that property
 
   # def test_username_uniqueness
 
@@ -148,10 +132,9 @@ class UserTest < MiniTest::Unit::TestCase
   #   @user2.email = "janedoe@mail.com"
   #   @user2.password = "123"
 
-
   #   assert_equal @user2.valid?, false
 
-  # end 
+  # end
 
   # def test_email_uniqueness
 
@@ -164,6 +147,4 @@ class UserTest < MiniTest::Unit::TestCase
   #   assert_equal @user4.valid?, false
 
   # end
-
-
 end
diff --git a/tests/test_helper.rb b/tests/test_helper.rb
index 93268b3..8a4a598 100644
--- a/tests/test_helper.rb
+++ b/tests/test_helper.rb
@@ -1,3 +1,4 @@
+# frozen_string_literal: true
 
 ENV['RACK_ENV'] = 'test'
 require 'minitest/autorun'
@@ -10,6 +11,7 @@ DB = Sequel.connect(
   database: 'notificator_test',
   host: 'db',
   user: 'unicorn',
-  password: 'magic')
+  password: 'magic'
+)
 
-require File.expand_path './app.rb'
\ No newline at end of file
+require File.expand_path './app.rb'
